/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MapTrackingService } from "../mapTracking.service";
import { MapTrackingCreateInput } from "./MapTrackingCreateInput";
import { MapTracking } from "./MapTracking";
import { MapTrackingFindManyArgs } from "./MapTrackingFindManyArgs";
import { MapTrackingWhereUniqueInput } from "./MapTrackingWhereUniqueInput";
import { MapTrackingUpdateInput } from "./MapTrackingUpdateInput";

export class MapTrackingControllerBase {
  constructor(protected readonly service: MapTrackingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MapTracking })
  async createMapTracking(
    @common.Body() data: MapTrackingCreateInput
  ): Promise<MapTracking> {
    return await this.service.createMapTracking({
      data: {
        ...data,

        order: data.order
          ? {
              connect: data.order,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        location: true,

        order: {
          select: {
            id: true,
          },
        },

        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MapTracking] })
  @ApiNestedQuery(MapTrackingFindManyArgs)
  async mapTrackings(@common.Req() request: Request): Promise<MapTracking[]> {
    const args = plainToClass(MapTrackingFindManyArgs, request.query);
    return this.service.mapTrackings({
      ...args,
      select: {
        createdAt: true,
        id: true,
        location: true,

        order: {
          select: {
            id: true,
          },
        },

        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MapTracking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async mapTracking(
    @common.Param() params: MapTrackingWhereUniqueInput
  ): Promise<MapTracking | null> {
    const result = await this.service.mapTracking({
      where: params,
      select: {
        createdAt: true,
        id: true,
        location: true,

        order: {
          select: {
            id: true,
          },
        },

        timestamp: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MapTracking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMapTracking(
    @common.Param() params: MapTrackingWhereUniqueInput,
    @common.Body() data: MapTrackingUpdateInput
  ): Promise<MapTracking | null> {
    try {
      return await this.service.updateMapTracking({
        where: params,
        data: {
          ...data,

          order: data.order
            ? {
                connect: data.order,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          location: true,

          order: {
            select: {
              id: true,
            },
          },

          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MapTracking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMapTracking(
    @common.Param() params: MapTrackingWhereUniqueInput
  ): Promise<MapTracking | null> {
    try {
      return await this.service.deleteMapTracking({
        where: params,
        select: {
          createdAt: true,
          id: true,
          location: true,

          order: {
            select: {
              id: true,
            },
          },

          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
