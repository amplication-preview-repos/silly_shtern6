/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { Burger } from "../../burger/base/Burger";
import {
  ValidateNested,
  IsOptional,
  IsDate,
  IsString,
  IsEnum,
} from "class-validator";
import { Type } from "class-transformer";
import { Customer } from "../../customer/base/Customer";
import { Delivery } from "../../delivery/base/Delivery";
import { MapTracking } from "../../mapTracking/base/MapTracking";
import { EnumOrderStatus } from "./EnumOrderStatus";

@ObjectType()
class Order {
  @ApiProperty({
    required: false,
    type: () => Burger,
  })
  @ValidateNested()
  @Type(() => Burger)
  @IsOptional()
  burger?: Burger | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: () => Customer,
  })
  @ValidateNested()
  @Type(() => Customer)
  @IsOptional()
  customer?: Customer | null;

  @ApiProperty({
    required: false,
    type: () => [Delivery],
  })
  @ValidateNested()
  @Type(() => Delivery)
  @IsOptional()
  deliveries?: Array<Delivery>;

  @ApiProperty({
    required: false,
    type: () => Delivery,
  })
  @ValidateNested()
  @Type(() => Delivery)
  @IsOptional()
  delivery?: Delivery | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: () => [MapTracking],
  })
  @ValidateNested()
  @Type(() => MapTracking)
  @IsOptional()
  mapTrackings?: Array<MapTracking>;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  orderDate!: Date | null;

  @ApiProperty({
    required: false,
    enum: EnumOrderStatus,
  })
  @IsEnum(EnumOrderStatus)
  @IsOptional()
  @Field(() => EnumOrderStatus, {
    nullable: true,
  })
  status?: "Option1" | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { Order as Order };
