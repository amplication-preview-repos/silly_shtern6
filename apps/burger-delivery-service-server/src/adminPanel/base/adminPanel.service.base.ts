/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, AdminPanel as PrismaAdminPanel } from "@prisma/client";

export class AdminPanelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AdminPanelCountArgs, "select">
  ): Promise<number> {
    return this.prisma.adminPanel.count(args);
  }

  async adminPanels<T extends Prisma.AdminPanelFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdminPanelFindManyArgs>
  ): Promise<PrismaAdminPanel[]> {
    return this.prisma.adminPanel.findMany<Prisma.AdminPanelFindManyArgs>(args);
  }
  async adminPanel<T extends Prisma.AdminPanelFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdminPanelFindUniqueArgs>
  ): Promise<PrismaAdminPanel | null> {
    return this.prisma.adminPanel.findUnique(args);
  }
  async createAdminPanel<T extends Prisma.AdminPanelCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdminPanelCreateArgs>
  ): Promise<PrismaAdminPanel> {
    return this.prisma.adminPanel.create<T>(args);
  }
  async updateAdminPanel<T extends Prisma.AdminPanelUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdminPanelUpdateArgs>
  ): Promise<PrismaAdminPanel> {
    return this.prisma.adminPanel.update<T>(args);
  }
  async deleteAdminPanel<T extends Prisma.AdminPanelDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdminPanelDeleteArgs>
  ): Promise<PrismaAdminPanel> {
    return this.prisma.adminPanel.delete(args);
  }
}
