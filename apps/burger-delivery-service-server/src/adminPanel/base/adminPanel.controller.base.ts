/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AdminPanelService } from "../adminPanel.service";
import { AdminPanelCreateInput } from "./AdminPanelCreateInput";
import { AdminPanel } from "./AdminPanel";
import { AdminPanelFindManyArgs } from "./AdminPanelFindManyArgs";
import { AdminPanelWhereUniqueInput } from "./AdminPanelWhereUniqueInput";
import { AdminPanelUpdateInput } from "./AdminPanelUpdateInput";

export class AdminPanelControllerBase {
  constructor(protected readonly service: AdminPanelService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AdminPanel })
  async createAdminPanel(
    @common.Body() data: AdminPanelCreateInput
  ): Promise<AdminPanel> {
    return await this.service.createAdminPanel({
      data: data,
      select: {
        adminEmail: true,
        adminName: true,
        adminPassword: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AdminPanel] })
  @ApiNestedQuery(AdminPanelFindManyArgs)
  async adminPanels(@common.Req() request: Request): Promise<AdminPanel[]> {
    const args = plainToClass(AdminPanelFindManyArgs, request.query);
    return this.service.adminPanels({
      ...args,
      select: {
        adminEmail: true,
        adminName: true,
        adminPassword: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AdminPanel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async adminPanel(
    @common.Param() params: AdminPanelWhereUniqueInput
  ): Promise<AdminPanel | null> {
    const result = await this.service.adminPanel({
      where: params,
      select: {
        adminEmail: true,
        adminName: true,
        adminPassword: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AdminPanel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAdminPanel(
    @common.Param() params: AdminPanelWhereUniqueInput,
    @common.Body() data: AdminPanelUpdateInput
  ): Promise<AdminPanel | null> {
    try {
      return await this.service.updateAdminPanel({
        where: params,
        data: data,
        select: {
          adminEmail: true,
          adminName: true,
          adminPassword: true,
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AdminPanel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAdminPanel(
    @common.Param() params: AdminPanelWhereUniqueInput
  ): Promise<AdminPanel | null> {
    try {
      return await this.service.deleteAdminPanel({
        where: params,
        select: {
          adminEmail: true,
          adminName: true,
          adminPassword: true,
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
