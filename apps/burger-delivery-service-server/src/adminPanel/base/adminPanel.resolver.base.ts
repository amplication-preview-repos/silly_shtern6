/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AdminPanel } from "./AdminPanel";
import { AdminPanelCountArgs } from "./AdminPanelCountArgs";
import { AdminPanelFindManyArgs } from "./AdminPanelFindManyArgs";
import { AdminPanelFindUniqueArgs } from "./AdminPanelFindUniqueArgs";
import { CreateAdminPanelArgs } from "./CreateAdminPanelArgs";
import { UpdateAdminPanelArgs } from "./UpdateAdminPanelArgs";
import { DeleteAdminPanelArgs } from "./DeleteAdminPanelArgs";
import { AdminPanelService } from "../adminPanel.service";
@graphql.Resolver(() => AdminPanel)
export class AdminPanelResolverBase {
  constructor(protected readonly service: AdminPanelService) {}

  async _adminPanelsMeta(
    @graphql.Args() args: AdminPanelCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AdminPanel])
  async adminPanels(
    @graphql.Args() args: AdminPanelFindManyArgs
  ): Promise<AdminPanel[]> {
    return this.service.adminPanels(args);
  }

  @graphql.Query(() => AdminPanel, { nullable: true })
  async adminPanel(
    @graphql.Args() args: AdminPanelFindUniqueArgs
  ): Promise<AdminPanel | null> {
    const result = await this.service.adminPanel(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AdminPanel)
  async createAdminPanel(
    @graphql.Args() args: CreateAdminPanelArgs
  ): Promise<AdminPanel> {
    return await this.service.createAdminPanel({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AdminPanel)
  async updateAdminPanel(
    @graphql.Args() args: UpdateAdminPanelArgs
  ): Promise<AdminPanel | null> {
    try {
      return await this.service.updateAdminPanel({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AdminPanel)
  async deleteAdminPanel(
    @graphql.Args() args: DeleteAdminPanelArgs
  ): Promise<AdminPanel | null> {
    try {
      return await this.service.deleteAdminPanel(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
